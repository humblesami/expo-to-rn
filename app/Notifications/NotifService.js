import PushNotification, { Importance } from 'react-native-push-notification';
import NotificationHandler from './NotificationHandler';

export default class NotifService {
	constructor(onRegister, onNotification) {
		this.lastId = 0;
		this.lastChannelCounter = 0;

		this.createDefaultChannels();

		NotificationHandler.attachRegister(onRegister);
		NotificationHandler.attachNotification(onNotification);

		// Clear badge number at start
		PushNotification.getApplicationIconBadgeNumber(function (number) {
			if (number > 0) {
				PushNotification.setApplicationIconBadgeNumber(0);
			}
		});		
	}

	createDefaultChannels() {
		let default_options = {
			channelId: "default-channel-id", // (required)
			channelName: `Default channel`, // (required)
			channelDescription: "A default channel", // (optional) default: undefined.
			soundName: "default", // (optional) See `soundName` parameter of `localNotification` function
			importance: Importance.HIGH, // (optional) default: Importance.HIGH. Int value of the Android notification importance
			vibrate: true, // (optional) default: true. Creates the default vibration pattern if true.
		};

		let custom_options = [
			{}, 
			{channelId:'sound-channel-id', channelDescription:'Sound', channelName: 'Sound channel', soundName: 's4.mp3'},
		];

		for(let channel_options of custom_options){
			let newChannel = {};
			for(let item in default_options){ newChannel[item] = default_options[ item]};
			for(let item in channel_options){ newChannel[item] = channel_options[ item]};
			PushNotification.createChannel(newChannel);			
			console.log(newChannel);
		}
		// PushNotification.getChannels(function (channels) {
		// 	console.log(channels);
		// });
	}

	popInitialNotification() {
		PushNotification.popInitialNotification((notification) => console.log('InitialNotication:', notification));
	}
	
	make_notif_options(soundName){
		this.lastId++;

		let default_notif_options = {
			channelId: soundName ? 'sound-channel-id' : 'default-channel-id',
			ticker: 'My Notification Ticker', // (optional)
			autoCancel: true, // (optional) default: true
			largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
			smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
			bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
			subText: 'This is a subText', // (optional) default: none
			color: 'red', // (optional) default: system default
			vibrate: true, // (optional) default: true
			vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
			tag: 'some_tag', // (optional) add tag to message
			group: 'group', // (optional) add group to message
			groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false
			ongoing: false, // (optional) set whether this is an "ongoing" notification
			actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more
			invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true
	
			when: null, // (optionnal) Add a timestamp pertaining to the notification (usually the time the event occurred). For apps targeting Build.VERSION_CODES.N and above, this time is not shown anymore by default and must be opted into by using `showWhen`, default: null.
			usesChronometer: true, // (optional) Show the `when` field as a stopwatch. Instead of presenting `when` as a timestamp, the notification will show an automatically updating display of the minutes and seconds since when. Useful when showing an elapsed time (like an ongoing phone call), default: false.
			timeoutAfter: 2000, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null
	
			/* iOS only properties */
			category: '', // (optional) default: empty string
			subtitle: "My Notification Subtitle", // (optional) smaller title below notification title
	
			/* iOS and Android properties */
			id: this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
			title: 'Local Notification', // (optional)
			message: 'My Notification Message', // (required)
			userInfo: { screen: 'home' }, // (optional) default: {} (using null throws a JSON value '<null>' error)
			playSound: !!soundName, // (optional) default: true
			soundName: soundName ? soundName : 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
			number: 5, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero),
			// repeatType: 'minute',
    		// repeatTime: 2,
		}

		console.log(333, soundName, soundName ? 'sound-channel-id' : 'default-channel-id', 444);
		let notif_options = {};
		for(let item in default_notif_options){
			notif_options[item] = default_notif_options[item];
		}

		return notif_options;
	}

	makeLocalNotification(soundName) {
		let notif_options = this.make_notif_options(soundName);
		PushNotification.localNotification(notif_options);
	}	

	scheduleNotif(soundName, seconds=10) {		
		let notif_options = this.make_notif_options(soundName);
		notif_options.date =  new Date(Date.now() + seconds * 1000);
		console.log(notif_options.date);
		PushNotification.localNotificationSchedule(notif_options);
	}

	checkPermission(cbk) {
		return PushNotification.checkPermissions(cbk);
	}

	requestPermissions() {
		return PushNotification.requestPermissions();
	}

	cancelNotif() {
		PushNotification.cancelLocalNotification(this.lastId);
	}

	cancelAll() {
		PushNotification.cancelAllLocalNotifications();
	}

	abandonPermissions() {
		PushNotification.abandonPermissions();
	}

	getScheduledLocalNotifications(callback) {
		PushNotification.getScheduledLocalNotifications(callback);
	}

	getDeliveredNotifications(callback) {
		PushNotification.getDeliveredNotifications(callback);
	}
}